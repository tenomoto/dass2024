---
title: モデル
---

気象や海洋でモデルは、予報モデルのみを指す。
ここでは、状態変数から観測変数に変換する測定モデル（観測演算子）も含める。

## 線型観測 

もっとも簡単な観測演算子は、状態変数の場所で値そのものを返すものである。$j$個目の観測が $i$番目の状態の値だとすると 

$$
\mathbf{y}_j = h(\mathbf{x})_i\;i=1,\dots,n,\,j=1,\dots,m
$$ {#eq-model-linear}
となる。
$m\ne n$であることに注意する。
すなわち、何点かおきや偏りがある場合など、状態のすべての位置で測定が行われるとは限らない。
この観測演算子の接線型は、$i$と$j$の指す位置が同じ要素が1であるような$m\times n$行列である。
状態の位置（と順序）で全て測定し$m=n$である場合は、単位行列になる。 
$$
\mathbf{H} = \mathbf{I}
$$ {#eq-model-identity}
観測位置が状態変数の位置と一致しない場合は、内挿が必要となる。


## 非線型観測

風速は典型的な非線型観測演算子である。

$$
|u| = h(u, v) = \sqrt{u^2 + v^2}
$$ {#eq-model-us}

風速の接線型演算子は
$$
\mathbf{H} = \frac{\partial|\mathbf{u}|}{\partial \mathbf{u}} =
\begin{pmatrix}
  \frac{u}{|\mathbf{u}|} &
  \frac{v}{|\mathbf{u|}}
\end{pmatrix}
$$ {#eq-model-dusdu}

風速のの単一観測の同化を考える。
第一推定値$(u,\,v)=(2,\,4)\,\mathrm{ms}^{-1}$（黒の菱形）の周りに標準偏差$\sigma_{u,v}=2\,\mathrm{ms}^{-1}$のアンサンブルメンバーが1000個得られたとする（灰色の点）。これに標準偏差$\sigma_{|u|}=0.3\,\mathrm{ms}^{-1}$の風速$|u|=3\,\mathrm{ms}^{-1}$の観測を同化する[@Lorenc:2003;@Bowler-etal:2013;@Enomoto-Nakashita:2024]。ここでは、EAKFした結果（水色の点）を示す。
```{r}
#| code-fold: true
#| file: "R/eakf.R"
```

```{r}
#| code-fold: true
set.seed(514)
ne <- 1000
sf <- 2
xf <- c(2, 4)
yo <- 3
so <- 0.3
r <- so^2

calc.speed <- function(u, v) {
  sqrt(u * u + v * v)
}

u <- scale(rnorm(ne, xf[1], sf), scale=FALSE) + xf[1]
v <- scale(rnorm(ne, xf[2], sf), scale=FALSE) + xf[2]
us <- calc.speed(u, v)
zf <- rbind(t(u), t(v), t(us))
za <- zf + eakf.analysis(zf, yo, r)
za.mean <- apply(za, 1, mean)

plot(u, v, xlim = c(-5, 10), ylim = c(-5, 10), asp=1,
     pch=16, cex=0.5, col="gray")
theta <- (0:359) / (2 * pi)
points(xf[1], xf[2], pch=18, cex=1.5, col="black")
points(za[1,], za[2,], pch=16, cex=0.5, col="lightblue")
points(za.mean[1], za.mean[2], pch=18, cex=1.5, col="blue")

lines((yo + so) * cos(theta), (yo + so) * sin(theta), type="l")
lines((yo - so) * cos(theta), (yo - so) * sin(theta), type="l")
```
::: {.callout-caution title="注意"}
非線型の場合は、アンサンブル平均に観測演算子を適用したもの（青い菱形）と観測演算子を適用したアンサンブルの平均は異なる。

$\overline{h(\mathbf{x})}\ne h(\bar{x})$

単一風速の同化の例では、$\overline{h(\mathbf{x^\mathrm{a}})} = \bar{\mathbf{z}}^\mathrm{a}_k = 3.05\,\mathrm{ms}^{-1},\,h(\bar{\mathbf{x}}^\mathrm{a})=2.48\,\mathrm{ms}^{-1}$で、アンサンブル平均に観測演算子を適用したものは最適ではない。
:::

## Lorenz-63モデル

@Lorenz:1963 のモデル（以下Lorenz-63）は熱対流を理想化したモデルで，パラメタ次第でカオスにふるまう。Lorenz-63は次の3変数の常微分方程式で表される。

$$
\begin{aligned}
\dot{X} &= -\sigma X + \sigma Y \\
\dot{Y} &= -XZ + rX -Y \\
\dot{Z} &= XY - \beta Z
\end{aligned}
$$
パラメタ$\sigma$, $r$, $\beta$はそれぞれPrandtl数，変形されたRayleigh数，アスペクト比を表す。
予報変数$X, Y, Z$はそれぞれ無次元化された対流の強さ，最大温度差，対流に伴う成層の変化を表す。
左辺の変数の上の$\cdot$は時間微分$\mathrm{d}/\mathrm{d}t$を表す記号である。

$\mathbf{x}=(1,\,3,\,5)$（青）及び$\mathbf{x}=(1.1,\,3.3,\,5.5)$（橙）から無次元時刻10まで積分した結果の3次元可視化結果を示す。回転や拡大縮小（右クリック）ができる。
```{r}
#| code-fold: true

l63 <- function(t, w, p, r, b){
  c(
            -p * w[1] + p * w[2],
    (r - w[3]) * w[1] -     w[2],
                     w[1] * w[2] - b * w[3]    
  )
}

rk4 <- function(f, t, y, h, ...) {
  k1 <- f(t, y, ...)
  k2 <- f(t + 0.5 * h, y + 0.5 * h * k1, ...)
  k3 <- f(t + 0.5 * h, y + 0.5 * h * k2, ...)
  k4 <- f(t + h, y + h * k3, ...)
  y + h * (k1 + 2 * k2 + 2 * k3 + k4) / 6
}

step.fom <- function(f, x, nstep, dt, ...) {
  t <- 0
  for (i in 1:nstep) {
    x <- rk4(f, t, x, dt, ...)
    t <- t + dt
  }
  x
}

tab10.new <- c('#5778a4', '#e49444', '#d1615d', '#85b6b2', '#6a9f58',
               '#e7ca60', '#a87c9f', '#f1a2a9', '#967662', '#b8b0ac')
```

```{r}
#| webgl: true
#| code-fold: true
#| cache: false
library(rgl)

options(rgl.useNULL = TRUE)
rgl::setupKnitr()

ns <- 3
x0 <- c(1, 3, 5)
x0.p <- c(1.1, 3.3, 5.5)
p <- 10
r <- 32
b <- 8 / 3
dt <- 0.01
nt <- 1000

x.rk4 <- matrix(rep(0, ns * nt), nrow=ns)
x.rk4[, 1] <- x0
x.rk4p <- matrix(rep(0, ns * nt), nrow=ns)
x.rk4p[, 1] <- x0.p
for (j in 2:nt) {
  t <- (j - 1) * dt
  x.rk4[, j] <- step.fom(l63, x.rk4[, j-1], 1, dt, p, r, b)
  x.rk4p[, j] <- step.fom(l63, x.rk4p[, j-1], 1, dt, p, r, b) 
}

plot3d(x.rk4[1,], x.rk4[2,], x.rk4[3,],
  axes=TRUE, xlab="X", ylab="Y", zlab="Z", type='l',
  lwd=2, col=tab10.new[1])
plot3d(x.rk4p[1,], x.rk4p[2,], x.rk4p[3,], type="l",
  lwd=3, col=tab10.new[2], add=TRUE)
plot3d(x.rk4[1,1], x.rk4[2,1], x.rk4[3,1],
  type="s", size=1, col=tab10.new[1], add=TRUE)
plot3d(x.rk4p[1,1], x.rk4p[2,1], x.rk4[3,1],
  type="s", size=1, col=tab10.new[2], add=TRUE)
```

Lorenz-63の随伴モデルの作成方法は @Huang-Yang:1996 に詳述されている。
この報告書や[tenomoto/l63vda](https://github.com/tenomoto/l63vda)では時間積分にEuler法が用いられているが、4次のRunge-Kutta法（RK4）を用いると、より安定するので、演習ではパラメタ$r$を大きめに調整して用いる。
青い実線及び破線は、時間積分にRK4を用いて$\mathbf{x}=(1, 3, 5)$及び$(1.1, 3.3, 5.5)$から積分したもので、橙色の実線及び破線はEuler法で$\mathbf{x}=(1, 3, 5)$及び$(1.1, 3.3, 5.5)$から積分したものである。
点線は報告書に掲載されている同じ設定とよく一致している。
RK4を用いると、解は安定していて初期値の差が現れるのが遅い。

```{r}
#| code-fold: true

ns <- 3
x0 <- c(1, 3, 5)
x0.p <- c(1.1, 3.3, 5.5)
p <- 10
r <- 32
b <- 8 / 3
dt <- 0.01
nt <- 800

x.rk4 <- matrix(rep(0, ns * nt), nrow=ns)
x.rk4[, 1] <- x0
x.rk4p <- matrix(rep(0, ns * nt), nrow=ns)
x.rk4p[, 1] <- x0.p
x.eul <- matrix(rep(0, ns * nt), nrow=ns)
x.eul[, 1] <- x0
x.eulp <- matrix(rep(0, ns * nt), nrow=ns)
x.eulp[, 1] <- x0.p

for (j in 2:nt) {
  t <- (j - 1) * dt
  x.rk4[, j] <- step.fom(l63, x.rk4[, j-1], 1, dt, p, r, b)
  x.rk4p[, j] <- step.fom(l63, x.rk4p[, j-1], 1, dt, p, r, b) 
  x.eul[, j] <- x.eul[, j-1] + l63(t, x.eul[, j-1], p, r, b) * dt
  x.eulp[, j] <- x.eulp[, j-1] + l63(t, x.eulp[, j-1], p, r, b) * dt
}


title <- paste("L63 free run")
off <- c(0, 40, 60)
t <- (1:nt) * dt
x.rk4 <- x.rk4 + off
x.rk4p <- x.rk4p + off
x.eul <- x.eul + off
x.eulp <- x.eulp + off
plot(1, type = "n", xlab="time", ylab="state", main=title,
     xlim=c(min(t), max(t)), ylim=c(-20, 150))
for (i in 1:ns) {
  lines(t, x.rk4[i,], lwd=2, lty=1, col=tab10.new[1])
  lines(t, x.rk4p[i,], lwd=2, lty=2, col=tab10.new[1])
  lines(t, x.eul[i,], lwd=2, lty=1, col=tab10.new[2])
  lines(t, x.eulp[i,], lwd=2, lty=2, col=tab10.new[2])
  abline(h=off[i], lty=3, col=tab10.new[10])
}
legend("topright", lty=c(1, 2, 1, 2), ncol=2,
       legend=c("RK4", "RK4p", "Euler", "Eulerp"),
       col=c(tab10.new[1], tab10.new[1], tab10.new[2], tab10.new[2]))
```



## Lorenz-96モデル

@Lorenz-Emanuel:1998
は追加の観測をどこで行うと効果的か考察するために、次の簡単なモデルを用いた。
$$
\frac{\mathrm{d}X_j}{\mathrm{d}t} = (X_{j+1} - X_{j-2})X_{j-1} - X_j + F
$$ $j=1, .., J$は格子点の番号で、$J=40$がよく用いられる。
格子点は緯度円上に等間隔に並んでいる。
$X$は気温や渦度のようなスカラーの気象学的要素を表す。
右辺第1項は移流を表す非線型項で全エネルギー$(\sum_jX_j^2)/2$は保存される。
右辺第2項は消散を表す線型項で全エネルギーを減少させる。
係数が1になるようにスケールされていて、消散の時定数は5日である。
強制項$F$は、時空間平均$\bar{X}$の範囲$[0,\,F]$、標準偏差$\sigma$の範囲$[0,\,F/2]$を決める。
$F>8/9$のとき波数8の波が成長する。

```{r}
#| code-fold: true
l96 <- function(x, F) {
  n <- length(x)
  (x[c(2:n, 1)] - x[c(n-1, n, 1:(n-2))]) * x[c(n, 1:(n-1))] - x + F
}

rk4 <- function(f, x, dt, opts) {
  k1 <- f(x, opts)
  k2 <- f(x + 0.5 * dt * k1, opts)
  k3 <- f(x + 0.5 * dt * k2, opts)
  k4 <- f(x + dt * k3, opts)
  x + (k1 + 2 * k2 + 2 * k3 + k4) * dt / 6
}
```

$F=3.85$で1000ステップ先まで4次のRunge-Kutta法で時間積分する。
時間刻み幅0.05は6時間に対応する。

```{r}
#| code-fold: true
nj <- 40
nstep <- 1001
x.hist <- matrix(0, nj, nstep)
x <- rnorm(nj)
F <- 3.85
dt <- 0.05
for (i in 1:nstep-1) {
  x <- rk4(l96, x, dt, F)
  x.hist[,i] <- x
}
```

等値線を描いてみる。

```{r}
#| code-fold: true
t <- seq(0, nstep*dt, length.out=nstep)
filled.contour(1:nj, t, x.hist, nlevel=11,
               ylim=rev(range(t)), xlab="j", ylab="time")
```

縞々の数と向きから、波数は8で位相は時間とともに西に進んでいることが分かる。
これに対し初期に振幅が大きな場所は時間とともに東に進んでいる。
このようなふるまいは、定常解$\bar{X}=F$に対する摂動方程式の解で説明できる。
$$
\frac{\mathrm{d}x_j}{\mathrm{d}t} = (x_{j+1} - x_{j-2})F - x_j
$$ $X_j=\bar{X}+x_j$とし摂動の2次の項は無視した。
波動解を仮定すると、$F>8/9$のときに波長$L=2\pi/k=2\pi/\cos^{-1}(1/4)\approx=4.767$の波が成長することが示される。波長はおよそ5なので、$J=40$に対しては波数は8に対応する。
このとき不安定波の位相速度$c=-(\sin k+2\sin 2k)(F/k)$はおよそ$-1.09$、群速度$c_\mathrm{g}=-(\cos k + 2\cos 2k)F$はおよそ$+1.17$となる。
このほかにも不安定モードが存在しており、$F>2.0$では波数4から12までの波が同時に不安定に、$F>4.0$では波の成長で強制項の効果を打ち消すことができなくなりカオスに遷移する。
データ同化では$F=8$がよく用いられるようである。

::: {.callout-note title="練習"}
-   $F$をいろいろと変えてみよう。
-   平均や分散が理論どおりか確認してみよう。
-   初期摂動の影響を調べてみよう。試行のたびに結果はどのように変わるか。
:::
